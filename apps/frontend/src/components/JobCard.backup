import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';

import { api } from '../utils';
import BomTable from './BomTable';
import TitleBlock from './TitleBlock';
import PrintingDetail from './PrintingDetail';
import DynamicJobCardForm from './DynamicJobCardForm';
import { generateJobCard } from '../services/jobCardService';

import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
  Input,
  Form,
  Button,
  Card,
  CardContent,
  toast,
  Separator,
} from '@prodgenie/libs/ui';
import { useJobCardStore, useBomStore } from '@prodgenie/libs/store';
import { apiRoutes, jobCardFields } from '@prodgenie/libs/constant';
import { jobCardSchema, jobCardFormValues } from '@prodgenie/libs/schema';
import { BomItem } from '@prodgenie/libs/types';

interface JobCardProps {
  tables: {
    data?: {
      bom: BomItem[];
      titleBlock: any;
      printingDetails?: any;
    };
  };
  fileId: string;
  signedUrl: string;
  setJobCardUrl: (url: string) => void;
}

const JobCard = ({
  tables,
  fileId,
  signedUrl,
  setJobCardUrl,
}: JobCardProps) => {
  const navigate = useNavigate();
  const { setBom, setTitleBlock, setSelectedItems, selectedItems } =
    useBomStore();
  const {
    setJobCardNumber,
    setScheduleDate,
    setPoNumber,
    setProductionQty,
    setRmBoardSize,
  } = useJobCardStore();

  const [activeTab, setActiveTab] = useState('select');

  const bom = tables.data?.bom || [];
  const titleBlock = tables.data?.titleBlock;
  const printingDetails = tables.data?.printingDetails;

  const form = useForm<jobCardFormValues>({
    resolver: zodResolver(jobCardSchema),
    defaultValues: jobCardFields.reduce((acc, field) => {
      acc[field.name] = field.defaultValue;
      return acc;
    }, {} as jobCardFormValues),
  });

  useEffect(() => {
    if (bom.length) {
      setBom(bom);
      setTitleBlock(titleBlock);
      setSelectedItems(bom.map((item) => item.slNo));
    } else {
      setSelectedItems([]);
    }
  }, [fileId, bom]);

  useEffect(() => {
    const fetchJobCardNo = async () => {
      try {
        const jobCardNo = await api.get(
          `${apiRoutes.jobCard.base}${apiRoutes.jobCard.getNumber}`
        );
        form.setValue('jobCardNumber', jobCardNo.data.data);
      } catch (err) {
        toast.error('Failed to fetch job card number.');
      }
    };
    fetchJobCardNo();
  }, []);

  const onSubmit = async (jobCardForm: jobCardFormValues) => {
    try {
      setJobCardNumber(jobCardForm.jobCardNumber);
      setScheduleDate(new Date(jobCardForm.scheduleDate));
      setPoNumber(jobCardForm.poNumber);
      setProductionQty(jobCardForm.productionQty);
      // setRmBoardSize({ ...jobCardForm.rmBoardSize });
      const jobCardData = {
        bom: bom.filter((item) => selectedItems.includes(item.slNo)),
        titleBlock,
        printingDetails,
        file: { id: fileId },
        jobCardForm,
        signedUrl,
      };
      console.log(jobCardForm);
      // const jobCard = await generateJobCard(jobCardData);
      // setJobCardUrl(jobCard.data.url);
      toast.success('Your Job Card is being generated. Please wait.');
      setActiveTab('form');
    } catch (err) {
      console.error(err);
      toast.error('Failed to generate Job Card. Please try again.');
    }
  };

  const handleInputChange =
    (type: string, onChange: (val: any) => void) =>
    (e: React.ChangeEvent<HTMLInputElement>) => {
      const value = type === 'number' ? Number(e.target.value) : e.target.value;
      onChange(value);
    };

  return (
    <Card className="border-none">
      <CardContent className="p-0">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)}>
            <Tabs
              value={activeTab}
              onValueChange={setActiveTab}
              className="w-full space-y-4"
            >
              <TabsList className="grid w-full grid-cols-2 mb-4">
                <TabsTrigger value="select">Bom Details</TabsTrigger>
                <TabsTrigger value="form">Job Card Details</TabsTrigger>
              </TabsList>

              <TabsContent value="select">
                <div className="p-4 flex flex-col gap-4">
                  <BomTable
                    bom={bom}
                    fileId={fileId}
                    setActiveItem={() => setActiveTab('form')}
                  />
                  <Separator />
                  <TitleBlock titleBlock={titleBlock} fileId={fileId} />
                  {printingDetails && (
                    <>
                      <Separator />
                      <PrintingDetail printingDetails={printingDetails} />
                    </>
                  )}
                </div>
              </TabsContent>

              <TabsContent value="form">
                <div className="p-4">
                  {jobCardFields.map((item) => {
                    if ('fields' in item) {
                      console.log(item);
                      return (
                        <div key={item.section} className="pt-4">
                          <FormLabel className="w-full">
                            {item.section}
                          </FormLabel>
                          <div className="flex gap-4">
                            {item.fields.map((f) => (
                              <FormField
                                control={form.control}
                                key={f.name}
                                name={f.name as keyof jobCardFormValues}
                                render={({ field }) => (
                                  <FormItem className="flex-1">
                                    <FormLabel>{f.label}</FormLabel>
                                    <FormControl>
                                      {/* <Input
                                        type={f.type}
                                        placeholder={f.placeholder}
                                        value={field.value ?? ''}
                                        onChange={(e) => {
                                          const value =
                                            f.type === 'number'
                                              ? Number(e.target.value)
                                              : e.target.value;
                                          field.onChange(value);
                                        }}
                                      /> */}
                                      <Input
                                        type={f.type}
                                        placeholder={f.placeholder}
                                        value={field.value ?? ''}
                                        onChange={handleInputChange(
                                          f.type,
                                          field.onChange
                                        )}
                                      />
                                    </FormControl>
                                    <FormMessage />
                                  </FormItem>
                                )}
                              />
                            ))}
                          </div>
                        </div>
                      );
                    }

                    return (
                      <FormField
                        control={form.control}
                        key={item.name}
                        name={item.name as keyof jobCardFormValues}
                        render={({ field }) => (
                          <FormItem className="pt-4">
                            <FormLabel>{item.label}</FormLabel>
                            <FormControl>
                              {/* <Input
                                type={item.type}
                                placeholder={item.placeholder}
                                value={field.value ?? ''}
                                onChange={(e) => {
                                  const value =
                                    item.type === 'number'
                                      ? Number(e.target.value)
                                      : e.target.value;
                                  field.onChange(value);
                                }}
                              /> */}
                              <Input
                                type={item.type}
                                placeholder={item.placeholder}
                                value={field.value ?? ''}
                                onChange={handleInputChange(
                                  item.type,
                                  field.onChange
                                )}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    );
                  })}

                  <DynamicJobCardForm
                    onSubmit={onSubmit}
                    onChange={handleInputChange}
                    form={form}
                    templates={['thinBlade']}
                  />

                  <Button type="submit" className="w-full mt-4">
                    Generate Job Cards
                  </Button>
                </div>
              </TabsContent>
            </Tabs>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
};

export default JobCard;
