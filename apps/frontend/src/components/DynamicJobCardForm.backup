import { z } from 'zod';
import { useEffect, useMemo, useState } from 'react';
import { FormProvider, useFormContext } from 'react-hook-form';

import { api } from '../utils';

import {
  FormControl,
  FormItem,
  FormLabel,
  FormMessage,
  FormField,
  Input,
} from '@prodgenie/libs/ui';
import { useBomStore, useJobCardStore } from '@prodgenie/libs/store';
import { apiRoutes } from '@prodgenie/libs/constant';

// Field configuration builder
export const getJobCardFields = (templates: string[]) => {
  return {
    section: 'Board Size',
    fields: [
      {
        name: 'rmBoardSize.length',
        label: 'RM Board Size Length (mm)',
        placeholder: 'eg: 1300',
        defaultValue: 0,
        type: 'number',
      },
      {
        name: 'rmBoardSize.width',
        label: 'RM Board Size Width (mm)',
        placeholder: 'eg: 1000',
        defaultValue: 0,
        type: 'number',
      },
    ],
  };
};

// Dynamic schema generator
export const getJobCardSchema = (templates: string[]) => {
  return z.object({
    rmBoardSize: z.object({
      length: z
        .number({ invalid_type_error: 'Length must be a number' })
        .min(1, 'Length is required'),
      width: z
        .number({ invalid_type_error: 'Width must be a number' })
        .min(1, 'Width is required'),
    }),
  });
};

export default function DynamicJobCardForm({
  form,
}: {
  form: ReturnType<typeof useFormContext<any>>;
}) {
  const { bom } = useBomStore();
  const { jobCardData, setJobCardData } = useJobCardStore();
  // const [jobCardData, setJobCardData] = useState([]);

  useEffect(() => {
    const sequences = bom.map((b) => b.description);
    const getTemplateFieldsFromSequence = async (sequences: any[]) => {
      try {
        const responses = await Promise.all(
          sequences.map(async (sequence) => {
            const res = await api.get(
              `${apiRoutes.sequence.base}/getJobCardDataFromSequence/${sequence}`
            );
            return res.data;
          })
        );
        setJobCardData(...responses);
      } catch (err) {
        console.error('Error fetching job card data:', err);
      }
    };
    if (Array.isArray(sequences) && sequences.length > 0) {
      getTemplateFieldsFromSequence(sequences);
    }
  }, [bom]);

  // const fields = useMemo(() => getJobCardFields(templates), [templates]);

  return (
    <FormProvider {...form}>
      {jobCardData.map((fields, idx) => (
        <div className="space-y-4" key={idx}>
          {fields?.fields?.map((f) => (
            <FormField
              control={form.control}
              key={f.name}
              name={f.name as any}
              render={({ field }) => (
                <FormItem className="pt-4">
                  <FormLabel>{f.label}</FormLabel>
                  <FormControl>
                    <Input
                      type={f.type}
                      placeholder={f.placeholder}
                      value={field.value ?? ''}
                      onChange={(e) =>
                        field.onChange(
                          f.type === 'number'
                            ? Number(e.target.value)
                            : e.target.value
                        )
                      }
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          ))}
        </div>
      ))}
    </FormProvider>
  );
}
