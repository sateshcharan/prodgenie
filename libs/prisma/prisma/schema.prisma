generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Org {
  id        String   @id @default(uuid())
  name      String   @unique
  credits   Float    @default(0)
  createdAt DateTime @default(now())

  users       User[]
  files       File[]
  inviteCodes InviteCode[]
  history     History[]
  jobs        Job[]
}

enum JobStatus {
  pending
  processing
  completed
  failed
}

model History {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  job   Job?    @relation(fields: [jobId], references: [id])
  jobId String?

  org   Org    @relation(fields: [orgId], references: [id])
  orgId String

  action    String
  status    JobStatus @default(pending)
  details   String?
  createdAt DateTime  @default(now())
}

enum UserType {
  ADMIN
  OWNER
  MEMBER
}

model User {
  id       String    @id @default(uuid())
  name     String?
  email    String    @unique
  password String
  type     UserType?
  orgId    String?
  org      Org?      @relation(fields: [orgId], references: [id])

  files     File[]
  createdAt DateTime  @default(now())
  history   History[]
  jobs      Job[]

  inviteCode     InviteCode? @relation("UserInviteCode")
  InviteCode     InviteCode? @relation(fields: [inviteCodeCode], references: [code])
  inviteCodeCode String?
}

enum FileType {
  drawing
  template
  sequence
  jobCard
  config
}

model File {
  id        String   @id @default(uuid())
  name      String
  path      String
  type      FileType
  userId    String
  orgId     String
  data      Json?
  thumbnail String?

  user      User     @relation(fields: [userId], references: [id])
  org       Org      @relation(fields: [orgId], references: [id])
  createdAt DateTime @default(now())
  jobs      Job[]
}

model InviteCode {
  code  String @id
  org   Org    @relation(fields: [orgId], references: [id])
  orgId String

  usedBy    String?   @unique
  user      User?     @relation("UserInviteCode", fields: [usedBy], references: [id])
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  User      User[]
}

model Job {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  orgId String
  org   Org    @relation(fields: [orgId], references: [id])

  fileId String
  file   File   @relation(fields: [fileId], references: [id])

  jobCardNumber Int
  config        Json
  jobStatus     JobStatus @default(pending)
  creditsUsed   Float
  createdAt     DateTime  @default(now())

  history History[]
}
