generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Core Entities
//

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String?
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  isDeleted Boolean   @default(false)

  memberships  WorkspaceMember[]
  files        File[]
  jobs         Job[]
  transactions Transaction[]
  activities   Activity[]
}

model Plan {
  id             String    @id @default(uuid())
  name           String
  maxMembers     Int
  maxStorage     Int       @default(340)
  monthlyCredits Int       @default(0)
  createdAt      DateTime  @default(now())
  deletedAt      DateTime?
  isDeleted      Boolean   @default(false)
  features       Json      @default("{}")
  price          Float     @default(0)

  workspaces Workspace[]
}

model Workspace {
  id        String    @id @default(uuid())
  name      String
  credits   Float     @default(0)
  thumbnail String?
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  isDeleted Boolean   @default(false)

  planId String?
  plan   Plan?   @relation(fields: [planId], references: [id])

  members      WorkspaceMember[]
  files        File[]
  jobs         Job[]
  transactions Transaction[]
  activities   Activity[]
}

//
// Memberships & Roles
//

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
}

enum WorkspaceMemberStatus {
  PENDING
  ACTIVE
  REMOVED
}

model WorkspaceMember {
  id          String                @id @default(uuid())
  userId      String
  workspaceId String
  role        WorkspaceRole         @default(MEMBER)
  status      WorkspaceMemberStatus @default(PENDING)
  joinedAt    DateTime              @default(now())
  deletedAt   DateTime?
  isDeleted   Boolean               @default(false)

  user      User      @relation(fields: [userId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])
}

//
// Files, Jobs, and History
//

enum FileType {
  drawing
  template
  sequence
  jobCard
  config
  table
}

model File {
  id          String    @id @default(uuid())
  workspaceId String
  uploadedBy  String
  name        String
  path        String
  type        FileType
  data        Json?
  thumbnail   String?
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
  isDeleted   Boolean   @default(false)

  workspace Workspace @relation(fields: [workspaceId], references: [id])
  user      User      @relation(fields: [uploadedBy], references: [id])
  jobs      Job[]
}

enum JobStatus {
  pending
  processing
  completed
  failed
}

model Job {
  id            String    @id @default(uuid())
  workspaceId   String
  fileId        String
  createdById   String
  jobCardNumber Int
  config        Json
  status        JobStatus @default(pending)
  creditsUsed   Float
  createdAt     DateTime  @default(now())
  deletedAt     DateTime?
  isDeleted     Boolean   @default(false)

  workspace    Workspace     @relation(fields: [workspaceId], references: [id])
  file         File          @relation(fields: [fileId], references: [id])
  createdBy    User          @relation(fields: [createdById], references: [id])
  transactions Transaction[]
  activities   Activity[]
}

//
// Transactions & Activity
//

model Transaction {
  id           String   @id @default(uuid())
  workspaceId  String
  userId       String
  jobId        String?
  amount       Float // +ve = credit added, -ve = credit spent
  reason       String // e.g. "job_run", "manual_topup", "subscription"
  balanceAfter Float // snapshot of workspace balance after txn
  createdAt    DateTime @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  job       Job?      @relation(fields: [jobId], references: [id])
}

enum ActivityType {
  USER_INVITED
  USER_JOINED
  FILE_UPLOADED
  JOB_CREATED
  JOB_COMPLETED
  JOB_FAILED
  PLAN_CHANGED
}

model Activity {
  id          String       @id @default(uuid())
  workspaceId String
  userId      String
  jobId       String?
  type        ActivityType
  details     Json? // flexible metadata
  createdAt   DateTime     @default(now())

  isDeleted Boolean  @default(false)
  deletedAt DateTime

  workspace Workspace @relation(fields: [workspaceId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  job       Job?      @relation(fields: [jobId], references: [id])
}
