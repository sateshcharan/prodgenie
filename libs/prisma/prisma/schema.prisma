generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Core Entities
//

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String?
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  isDeleted Boolean   @default(false)

  memberships WorkspaceMember[]
  files       File[]
  events      Event[]
}

model Plan {
  id             String    @id @default(uuid())
  name           String
  maxMembers     Int
  maxStorage     Int       @default(340)
  monthlyCredits Int       @default(0)
  createdAt      DateTime  @default(now())
  deletedAt      DateTime?
  isDeleted      Boolean   @default(false)
  features       Json      @default("{}")
  price          Float     @default(0)

  workspaces Workspace[]
}

model Workspace {
  id        String    @id @default(uuid())
  name      String
  credits   Float     @default(0)
  thumbnail String?
  createdAt DateTime  @default(now())
  deletedAt DateTime?
  isDeleted Boolean   @default(false)

  planId String?
  plan   Plan?   @relation(fields: [planId], references: [id])

  members WorkspaceMember[]
  files   File[]
  events  Event[]
}

//
// Memberships & Roles
//

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
}

enum WorkspaceMemberStatus {
  PENDING
  ACTIVE
  REMOVED
}

model WorkspaceMember {
  id          String                @id @default(uuid())
  userId      String
  workspaceId String
  role        WorkspaceRole         @default(MEMBER)
  status      WorkspaceMemberStatus @default(PENDING)
  joinedAt    DateTime              @default(now())
  deletedAt   DateTime?
  isDeleted   Boolean               @default(false)

  user      User      @relation(fields: [userId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])
}

//
// Files
//

enum FileType {
  drawing
  template
  sequence
  jobCard
  config
  table
}

model File {
  id          String    @id @default(uuid())
  workspaceId String
  uploadedBy  String
  name        String
  path        String
  type        FileType
  data        Json?
  thumbnail   String?
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
  isDeleted   Boolean   @default(false)

  workspace Workspace @relation(fields: [workspaceId], references: [id])
  user      User      @relation(fields: [uploadedBy], references: [id])
  events    Event[]
}

//
// Events
//

enum EventType {
  DRAWING_DATA_EXTRACTION
  JOBCARD_GENERATION
  PLAN_CHANGE
  MANUAL_TOPUP
  SUBSCRIPTION
}

enum EventStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model Event {
  id           String      @id
  workspaceId  String
  userId       String
  type         EventType
  creditChange Float?      @default(0) // +ve = added, -ve = spent
  balanceAfter Float?
  status       EventStatus @default(PENDING) // PENDING, PROCESSING, COMPLETED, FAILED
  progress     Float?      @default(0)
  errorData    Json?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  fileId       String?

  workspace Workspace @relation(fields: [workspaceId], references: [id])
  File      File?     @relation(fields: [fileId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}
