generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Core Entities
//

model User {
  id          String              @id @default(uuid())
  email       String              @unique
  name        String?
  createdAt   DateTime            @default(now())

  memberships WorkspaceMember[]   
  files       File[]
  history     History[]
  jobs        Job[]
  invitesSent WorkspaceInvite[]   @relation("UserInvites") 
}

model Plan {
  id                    String     @id @default(uuid())
  name                  String
  maxMembers            Int        
  maxWorkspacesPerUser  Int        
  createdAt             DateTime   @default(now())

  workspaces            Workspace[]
}

model Workspace {
  id         String            @id @default(uuid())
  name       String
  credits    Float             @default(0)
  createdAt  DateTime          @default(now())

  planId     String?
  plan       Plan?              @relation(fields: [planId], references: [id])

  members    WorkspaceMember[]
  files      File[]
  history    History[]
  jobs       Job[]
  invites    WorkspaceInvite[]
}

//
// Memberships & Roles
//

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
}

model WorkspaceMember {
  id           String         @id @default(uuid())
  userId       String
  workspaceId  String
  role         WorkspaceRole  @default(MEMBER)
  joinedAt     DateTime       @default(now())

  user         User           @relation(fields: [userId], references: [id])
  workspace    Workspace      @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])
}

//
// Invites
//

model WorkspaceInvite {
  id           String         @id @default(uuid())
  workspaceId  String
  email        String
  role         WorkspaceRole  @default(MEMBER)
  invitedById  String
  expiresAt    DateTime?
  acceptedAt   DateTime?

  workspace    Workspace      @relation(fields: [workspaceId], references: [id])
  invitedBy    User           @relation("UserInvites", fields: [invitedById], references: [id])
}

//
// Files, Jobs, and History
//

enum FileType {
  drawing
  template
  sequence
  jobCard
  config
  table
}

model File {
  id          String      @id @default(uuid())
  workspaceId String
  uploadedBy  String
  name        String
  path        String
  type        FileType
  data        Json?
  thumbnail   String?
  createdAt   DateTime    @default(now())

  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  user        User        @relation(fields: [uploadedBy], references: [id])
  jobs        Job[]
}

enum JobStatus {
  pending
  processing
  completed
  failed
}

model Job {
  id            String      @id @default(uuid())
  workspaceId   String
  fileId        String
  createdById   String
  jobCardNumber Int
  config        Json
  status        JobStatus   @default(pending)
  creditsUsed   Float
  createdAt     DateTime    @default(now())

  workspace     Workspace   @relation(fields: [workspaceId], references: [id])
  file          File        @relation(fields: [fileId], references: [id])
  createdBy     User        @relation(fields: [createdById], references: [id])
  history       History[]
}

model History {
  id           String      @id @default(uuid())
  workspaceId  String
  userId       String
  jobId        String?
  action       String
  status       JobStatus   @default(pending)
  details      String?
  createdAt    DateTime    @default(now())

  workspace    Workspace   @relation(fields: [workspaceId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
  job          Job?        @relation(fields: [jobId], references: [id])
}
